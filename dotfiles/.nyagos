package.path = nyagos.env.KARANOENV .. "/setup/nyagos/lua/?.lua;" .. package.path
share.karano = {
  git = require "git",
  localenv = require "localenv",
}
require "completion"

nyagos.option.glob = true

-- Set environment variables --------------------------------------------------
set{
  HOME          = nyagos.env.USERPROFILE,

  EDITOR        = "nvim-qt.exe",
  LESSCHARSET   = "utf-8",

  PATHEXT       = ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC",
}

addpath "%HOME%\\.bin"
for i,v in pairs(nyagos.glob(nyagos.env.HOME.."\\.tools\\*")) do
  path = nyagos.pathjoin(v, "bin")
  if nyagos.access(path, 0) then addpath(path) end
end

-- aliases --------------------------------------------------------------------
nyagos.alias.l  = "ls"
nyagos.alias.ll  = "ls -l"


nyagos.alias.nvim = 'wezterm cli split-pane --left -- cmd /c "%USERPROFILE%/.karanoenv/setenv.bat && nvim.exe"'

-- Use catalog ----------------------------------------------------------------
use "dollar"
use "git"

-- Beep command ---------------------------------------------------------------
nyagos.env.KARANO_BEEP = nil
nyagos.alias.beep = function(args)
  if args[1] == "on" or args[1] == "off" then
    nyagos.env.KARANO_BEEP = (args[1] == "on") and 1 or nil
  elseif args[1] == nil then
    nyagos.env.KARANO_BEEP = (not nyagos.env.KARANO_BEEP) and 1 or nil
  else
    print("Usage: beep [on/off]")
  end
end

-- Set Prompt ----------------------------------------------------------------
-- code from 'http://lua-users.org/wiki/SplitJoin'
share.split = function (str, pat)
    local t = {}
    local fpat = "(.-)"..pat
    local last_end = 1
    local s, e, cap = str:find(fpat, 1)
    while s do
        if s ~= 1 or cap ~= "" then
            table.insert(t,cap)
        end
        last_end = e+1
        s, e, cap = str:find(fpat, last_end)
    end
    if last_end <= #str then
        cap = str:sub(last_end)
        table.insert(t, cap)
    end
    return t
end

-- code from https://qiita.com/JugernautOnishi/items/aae90e9bbbd897c0d5ed
share.gis = function ()
  local gs = {}
  local c  = {}
  c.dc     = "$e[36;40;1m" -- default color
  c.bc     = "$e[33;1m" -- brunch color
  c.ok     = "$e[32;1m✔"
  c.okc    = "$e[32;1m" -- color only
  c.ng     = "$e[31;1m○"
  c.ngc    = "$e[31;1m" -- color only

  gs.gitdir = share.karano.git.gitdir(nyagos.getwd())
  if gs.gitdir == nil then
    return false
  end
  --nyagos.evalは出力をtrimする(?)ので--branch必須
  gs.gitst = nyagos.eval('git.exe status --porcelain --branch 2>nul')
  local t = {}
  t = share.split(gs.gitst, "\n")
  for i, v in ipairs(t) do
    if i == 1 then
      gs.remote = v:match("^##.*")
      -- ahead or behind
      if gs.remote then
        -- local branch name
        gs.lbn = share.karano.git.current_branch(gs.gitdir)
        -- remote branch name
        gs.rbn = gs.remote:match("%.%.%.(%w*/%S+)") or c.ng.."/"..gs.lbn
        gs.bst = gs.remote:match("%[.*%]")
        if gs.bst then
          local ab = gs.bst:gsub("[%[%]]", "")
          ab = share.split(ab, ",")
          for i, v in ipairs(ab) do
            local oltab = share.split(v," ")
            local lastlng = oltab[2] == "1" and " commit." or " commits."
            if oltab[1] == "ahead" then
              -- ahead
              gs.ahead = c.ngc..oltab[1].." "..c.ngc..oltab[2]..lastlng
              gs.push = c.ng
            elseif oltab[1] == "behind" then
              -- behind
              gs.behind = c.ngc..oltab[1].." "..c.ngc..oltab[2]..lastlng
              gs.pull = c.ng
            end
            gs.ahead = gs.ahead or ""
            gs.behind = gs.behind or ""
            gs.synced = gs.synced or ""
          end
        else
          gs.ahead = gs.ahead or ""
          gs.behind = gs.behind or ""
          if gs.rbn == c.ng.."/"..gs.lbn then
            gs.synced =  c.ng.."Not Yet Add Remote Repository!"
            gs.push = gs.push or c.bc.."-"
            gs.pull = gs.pull or c.bc.."-"
          else
            gs.synced = c.ok.."All Synced!"
            gs.push = gs.push or c.ok
            gs.pull = gs.pull or c.ok
          end
        end
      end
    else
      -- untrackcheck
      if gs.add ~= c.ng then
        gs.add = v:match("^%?%?") and c.ng or c.ok
      end
      -- modifycheck
      if gs.mod ~= c.ng then
        gs.mod = v:match("M%s[^%s]") and c.ng or c.ok
      end
      -- commitcheck
      if gs.commit ~= c.ng then
        gs.commit = v:match("[AM]%s%s") and c.ng or c.ok
      end
    end
  end
  gs.add = gs.add or c.ok
  gs.mod = gs.mod or c.ok
  gs.commit = gs.commit or c.ok
  gs.push = gs.push or c.ok
  gs.pull = gs.pull or c.ok
  gs.result = c.dc.."$_(Untrack:"..gs.add..c.dc.." Modify:"..gs.mod..c.dc.." Commit:"..gs.commit..c.dc.." Push:"..gs.push..c.dc.." Pull:"..gs.pull..c.dc..c.dc.." Branch:("..c.bc..gs.rbn..c.dc..")["..gs.ahead..gs.behind..gs.synced..c.dc.."]"..c.dc..")"
  return gs.result
end

share.fnm_cd = function(this)
  local msg = nyagos.eval("%FNM_DIR%\\cd.cmd .")
  if msg ~= '' then
    print(msg)
  end
end

-- Simple Prompt for CMD.EXE
nyagos.env.PROMPT="[$s$P$s]$_$$$s"

share.karano.localenv.regist_default_envs()

-- Coloring Prompt for NYAGOS.exe
nyagos.prompt = function(this)
  share.fnm_cd()

  local title = "NYAGOS - ".. nyagos.getwd():gsub('\\','/')

  local err_level = tonumber(nyagos.eval("echo %ERRORLEVEL%")) or 0

  local retv = "$sExit:$s"..err_level.."$s"
  local date = "$s"..(os.date("%Y-%m-%d %H:%M:%S")).."$s"
  local beep = "$sBeep:$s"..(nyagos.env.KARANO_BEEP and "on" or "off").."$s"
  local info = '['..retv..'|'..date..'|'..beep..']'

  local color = (err_level == 0) and "$_$e[36;40;1m" or "$_$e[35;40;1m"

  local pts = color..info..'[$s$P$s]'..(share.gis() or '')..'$e[37;1m$_$$$s'

  share.karano.localenv.load()

  return nyagos.default_prompt(pts, title)
end

-- Hooks ----------------------------------------------------------------------
nyagos.postexechook = function ()
  if nyagos.env.KARANO_BEEP then
    nyagos.raweval("rundll32", "user32.dll,MessageBeep")
  end
end

-- vim:set ft=lua: --
